Background:
  - pyenv allows you to install multiple versions of the python interpeter.
  - pyenv-virtualenv allows you to have multiple independent python module sets.
  - A specific python version plus a specific module set is called an 'environment'.
  - These tools allow you to create multiple (completely) independent python environments on one system.
  - These python environments can be enabled/disabled manually or automatically.
  - These python environments are user-specific, and don't affect the system's default python install.
  - This is great for development sandboxes or accommodating python code with weird/broken dependencies.
  - Don't jack up your system - use the python environments instead!
  - https://github.com/pyenv/pyenv
  - https://github.com/pyenv/pyenv-virtualenv

Installation:
  OSX:
    brew update
    brew install pyenv pyenv-virtualenv
    echo 'eval "$(pyenv init -)"' >> ~/.profile
    echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.profile

Using pyenv:

  - You can just install python versions without environments, but usually you
    want environments anyways. Plus, installing an environment automatically
    installs the associated python version if it's not already. So just the
    use pyenv-virtualenv commands described below.

Using pyenv-virtualenv:

  - Create a new environment:
    $ pyenv virtualenv 2.7.10 my-virtual-env-name

  - List all existing environments:
    $ pyenv virtualenvs

  - Manually enable/disable an environment:
    $ pyenv activate my-virtual-env-name
    $ pyenv deactivate

  - Automatically enable/disable an environment when you enter/leave a particular directory tree:
    echo 'my-virtual-env-name' > .python-version
    (run the above in the root of the directory tree)

  - Delete an environment:
    $ pyenv uninstall my-virtual-env-name
